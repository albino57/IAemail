21:12 26/08/2025

‚Üì Tipos de commits ‚Üì

feat:-------Nova funcionalidade (feature). Use quando adicionar algo novo que n√£o existia.
style:------Mudan√ßas visuais que n√£o alteram l√≥gica (cores, fontes, espa√ßamento, formata√ß√£o).
fix:--------Corre√ß√£o de bugs ou errors.
docs:-------Mudan√ßas na documenta√ß√£o (como o README.md).
chore:------Tarefas de manuten√ß√£o que n√£o alteram l√≥gica nem funcionalidade (atualizar pacotes, configurar CI).
refactor:---Mudan√ßas no c√≥digo que n√£o adicionam funcionalidade nem consertam bugs, apenas melhoram a estrutura ou legibilidade.
build:------Mudan√ßas em scripts de build, depend√™ncias ou ferramentas (ex: Webpack, Docker).build: adiciona Dockerfile para deploy.
ci:---------Mudan√ßas em configura√ß√£o de Integra√ß√£o Cont√≠nua (GitHub Actions, GitLab CI).
perf:-------Melhorias de performance (deixar o c√≥digo mais r√°pido ou eficiente).
test:-------Adi√ß√£o ou modifica√ß√£o de testes automatizados (n√£o altera funcionalidade).
revert:-----Reverte um commit anterior.

ex: git commit -m "fix: Bug consertado no bot√£o Aplicar"

‚Üë------------------‚Üë

‚Üì Passo r√°pidos de commits ‚Üì

	git status (para ver o que mudou).

	git add . (para preparar tudo para o commit).
	
	git add arquivo1 (prepara o arquivo1 para o commit).

	git commit -m "" (para registrar a vers√£o).

	git push (para enviar para o GitHub e deixar tudo salvo na nuvem).
	
	git commit -a -m "": √â um atalho pr√°tico para quando voc√™ s√≥ modificou arquivos que j√° estavam no git e quer commitar tudo de uma vez.

‚Üë--------------------------‚Üë


‚Üì‚Üì Passos completos desde a primeira conex√£o ‚Üì‚Üì

üéØ PASSO 1: Preparar o Reposit√≥rio GitHub
Objetivo: Criar um reposit√≥rio no GitHub e conectar com a pasta do seu projeto.

Acesse: github.com e fa√ßa login.

Clique em "New repository".

Nome do reposit√≥rio: IAemail (ou o nome que voc√™ quiser).

Deixe como P√∫blico.

N√ÉO marque "Initialize this repository with a README". (Voc√™ j√° tem os arquivos localmente).

Clique em Create repository.


üéØ PASSO 2: Configurar o Git Localmente
No terminal do LARAGON, na pasta do seu projeto (C:\laragon\www\IAemail):

Execute estes comandos UM POR UM:
# Inicializa o Git na sua pasta
	git init

# Configura seu usu√°rio (use o mesmo email e nome do seu GitHub)
	git config user.email "seu@email.com"
	git config user.name "Seu Nome"

# Conecta seu reposit√≥rio local ao remoto do GitHub
	git remote add origin https://github.com/SEU_USUARIO/IAemail.git
# (Substitua SEU_USUARIO pelo seu nome de usu√°rio do GitHub)


PASSO 3: O Arquivo .gitignore (IMPORTANTE)
Crie um arquivo chamado .gitignore na pasta C:\laragon\www\IAemail e cole isto dentro:

# Arquivo: C:\laragon\www\IAemail\.gitignore

# Ignora a pasta do ambiente virtual Python
backend/venv/

# Ignora arquivos de ambiente com chaves secretas!
backend/.env

# Ignora cache do Python
__pycache__/
*.pyc

Isso vai evitar que voc√™ suba acidentalmente sua chave da API ou outras coisas sens√≠veis.


üéØ PASSO 4: Primeiro Commit e Push
No terminal do Laragon, na pasta C:\laragon\www\IAemail, execute:

# Adiciona TODAS as altera√ß√µes (exceto o que est√° no .gitignore)
git add .

# Confirma as altera√ß√µes com uma mensagem
git commit -m "Primeiro commit: Subindo estrutura do projeto IAemail"

# Envia tudo para o reposit√≥rio no GitHub
git push -u origin main

Algumas coisinhas que podem acontecer:

	Se der erro no git push falando que n√£o encontrou main, tente:

	git push -u origin master

(O GitHub √†s vezes cria com main e √†s vezes com master).

Ele vai pedir seu nome de usu√°rio e senha do GitHub. Na senha, pode ser que voc√™ precise usar um token de acesso pessoal em vez da sua senha normal.